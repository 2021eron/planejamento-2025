    <!-- ===== ESTRUTURA HTML MODIFICADA ===== -->
    <div class="controls-container">
        <div class="employee-controls">
            <label for="employee-select">Funcionário:</label>
            <select id="employee-select"></select>
            <input type="text" id="new-employee-name" placeholder="Nome do novo funcionário">
            <button id="add-employee-btn">Adicionar</button>
            <button id="remove-employee-btn">Remover Selecionado</button>
        </div>

        <!-- NOVO Bloco HTML para os Resumos -->
        <div class="summary-container">
            <div class="summary-item">
                Folgas Úteis: <span id="summary-uteis">0</span>
            </div>
            <div class="summary-item">
                Folgas Feriado e FDS: <span id="summary-feriado-fds">0</span>
            </div>
            <div class="summary-item summary-total">
                <strong>TOTAL ANUAL:</strong> <strong><span id="summary-total">0</span></strong>
            </div>
        </div>
    </div>
    <!-- ==================================== -->

    <div id="calendar-container"></div>
</div>

<!-- ===== SCRIPTS DO FIREBASE (Sem alteração) ===== -->
<script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore-compat.js"></script>

<script>
    // SEU CÓDIGO DO FIREBASE FOI INSERIDO AQUI
    const firebaseConfig = {
      apiKey: "AIzaSyAvIeT-wJr8SpWerE7C4f0uYApQlRib4nY",
      authDomain: "planejamento-lofty.firebaseapp.com",
      projectId: "planejamento-lofty",
      storageBucket: "planejamento-lofty.firebasestorage.app",
      messagingSenderId: "698600451216",
      appId: "1:698600451216:web:26670978ab1b707eaa3c15"
    };
    // =======================================================

    // Inicializa o Firebase
    firebase.initializeApp(firebaseConfig);
    const db = firebase.firestore();
    const docRef = db.collection("planejamentos").doc("dados2025");

    document.addEventListener('DOMContentLoaded', () => {
        const YEAR = 2025;
        const MONTHS = ['JANEIRO', 'FEVEREIRO', 'MARÇO', 'ABRIL', 'MAIO', 'JUNHO', 'JULHO', 'AGOSTO', 'SETEMBRO', 'OUTUBRO', 'NOVEMBRO', 'DEZEMBRO'];
        const DAYS_OF_WEEK = ['SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SÁB', 'DOM'];
        const COLOR_CYCLE = ['default', 'verde', 'amarelo', 'laranja', 'vermelho'];

        const calendarContainer = document.getElementById('calendar-container');
        const employeeSelect = document.getElementById('employee-select');
        const newEmployeeInput = document.getElementById('new-employee-name');
        const addEmployeeBtn = document.getElementById('add-employee-btn');
        const removeEmployeeBtn = document.getElementById('remove-employee-btn');

        let state = { funcionarios: [], funcionarioSelecionadoId: null };
        let localStateLoaded = false;

        function saveState() {
            if (!localStateLoaded) return;
            docRef.set(state).catch(error => console.error("Erro ao salvar no Firebase: ", error));
        }

        function listenForChanges() {
            docRef.onSnapshot(doc => {
                if (doc.exists) {
                    state = doc.data();
                } else {
                    const initialId = `func-${Date.now()}`;
                    state = {
                        funcionarios: [{
                            id: initialId, nome: "Meu Planejamento",
                            calendario: {
                                '2025-01-01': 'verde', '2025-03-03': 'verde', '2025-03-04': 'verde', '2025-04-18': 'verde',
                                '2025-04-21': 'verde', '2025-05-01': 'verde', '2025-06-19': 'verde', '2025-09-07': 'verde',
                                '2025-10-12': 'verde', '2025-11-02': 'verde', '2025-11-15': 'verde', '2025-11-20': 'verde',
                                '2025-12-25': 'verde'
                            }
                        }],
                        funcionarioSelecionadoId: initialId,
                    };
                    saveState();
                }
                localStateLoaded = true;
                renderApp();
            });
        }

        // ===== NOVA FUNÇÃO PARA CALCULAR E EXIBIR OS RESUMOS =====
        function calculateAndDisplaySummaries() {
            const funcionarioAtual = state.funcionarios.find(f => f.id === state.funcionarioSelecionadoId);

            let folgasUteis = 0;
            let folgasFeriadoFDS = 0;

            if (funcionarioAtual && funcionarioAtual.calendario) {
                for (const dateString in funcionarioAtual.calendario) {
                    const color = funcionarioAtual.calendario["dateString"]; // Corrigido: Acessar a cor pela chave correta
                    // Adicionar 'T00:00:00' para evitar problemas de fuso horário que podem alterar o dia
                    const date = new Date(dateString + 'T00:00:00');
                    const dayOfWeek = date.getDay(); // 0 = Domingo, 1 = Segunda, ..., 6 = Sábado

                    const isWeekday = dayOfWeek >= 1 && dayOfWeek <= 5;

                    // Condição para "Folgas Úteis"
                    // Cores amarela, laranja ou vermelha de segunda a sexta
                    if (isWeekday && ['amarelo', 'laranja', 'vermelho'].includes(color)) {
                        folgasUteis++;
                    }

                    // Condição para "Folgas Feriado e Final de Semana"
                    // Qualquer cor no fim de semana OU cor verde em qualquer dia
                    if (!isWeekday || color === 'verde') {
                       folgasFeriadoFDS++;
                    }
                }
            }

            const totalAnual = folgasUteis + folgasFeriadoFDS;

            // Atualiza os valores no HTML
            document.getElementById('summary-uteis').textContent = folgasUteis;
            document.getElementById('summary-feriado-fds').textContent = folgasFeriadoFDS;
            document.getElementById('summary-total').textContent = totalAnual;
        }

        function renderApp() {
            renderEmployeeControls();
            renderCalendar();
            calculateAndDisplaySummaries(); // Chama o cálculo após renderizar tudo
        }

        function renderEmployeeControls() {
            const currentSelection = employeeSelect.value;
            employeeSelect.innerHTML = '';
            if (state.funcionarios.length === 0) {
                 const option = document.createElement('option');
                 option.textContent = "Adicione um funcionário";
                 employeeSelect.appendChild(option);
                 employeeSelect.disabled = true; removeEmployeeBtn.disabled = true;
            } else {
                employeeSelect.disabled = false; removeEmployeeBtn.disabled = false;
                state.funcionarios.forEach(func => {
                    const option = document.createElement('option');
                    option.value = func.id;
                    option.textContent = func.nome;
                    employeeSelect.appendChild(option);
                });
                employeeSelect.value = state.funcionarios.some(f => f.id === currentSelection) ? currentSelection : state.funcionarioSelecionadoId;
                state.funcionarioSelecionadoId = employeeSelect.value;
            }
        }

        function renderCalendar() {
            calendarContainer.innerHTML = '';
            const funcionarioAtual = state.funcionarios.find(f => f.id === state.funcionarioSelecionadoId);
            MONTHS.forEach((monthName, monthIndex) => {
                const monthContainer = document.createElement('div');
                monthContainer.className = 'month-container';
                const title = document.createElement('h3');
                title.className = 'month-title';
                title.textContent = monthName;
                monthContainer.appendChild(title);
                const monthGrid = document.createElement('div');
                monthGrid.className = 'month-grid';
                DAYS_OF_WEEK.forEach(day => {
                    const headerCell = document.createElement('div');
                    headerCell.className = 'header-cell';
                    headerCell.textContent = day;
                    monthGrid.appendChild(headerCell);
                });
                const daysInMonth = new Date(YEAR, monthIndex + 1, 0).getDate();
                const firstDayOfWeek = (new Date(YEAR, monthIndex, 1).getDay() + 6) % 7;
                for (let i = 0; i < firstDayOfWeek; i++) {
                    const emptyCell = document.createElement('div');
                    emptyCell.classList.add('day-cell', 'empty');
                    monthGrid.appendChild(emptyCell);
                }
                for (let day = 1; day <= daysInMonth; day++) {
                    const dayCell = document.createElement('div');
                    dayCell.classList.add('day-cell', 'valid-day');
                    dayCell.textContent = day;
                    const dateString = `${YEAR}-${String(monthIndex + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
                    dayCell.dataset.date = dateString;
                    const dayOfWeek = new Date(YEAR, monthIndex, day).getDay();
                    if (dayOfWeek === 0 || dayOfWeek === 6) { dayCell.classList.add('weekend'); }
                    if (funcionarioAtual && funcionarioAtual.calendario && funcionarioAtual.calendario.hasOwnProperty(dateString)) {
                        const colorClass = `color-${funcionarioAtual.calendario["dateString"]}`; // Corrigido: Acessar a cor pela chave correta
                        dayCell.classList.add(colorClass);
                    }
                    monthGrid.appendChild(dayCell);
                }
                monthContainer.appendChild(monthGrid);
                calendarContainer.appendChild(monthContainer);
            });
        }

        function handleDayClick(event) {
            const cell = event.target.closest('.valid-day');
            if (!cell || !state.funcionarioSelecionadoId) return;
            const date = cell.dataset.date;
            const funcionario = state.funcionarios.find(f => f.id === state.funcionarioSelecionadoId);
            if (!funcionario) return;
            if (!funcionario.calendario) { funcionario.calendario = {}; } // Garante que o calendário existe
            const currentColor = funcionario.calendario["date"] || 'default'; // Corrigido: Acessar a cor pela chave correta
            const currentIndex = COLOR_CYCLE.indexOf(currentColor);
            const nextIndex = (currentIndex + 1) % COLOR_CYCLE.length;
            const nextColor = COLOR_CYCLE["nextIndex"]; // Corrigido: Acessar a cor pelo índice correto
            if (nextColor === 'default') { delete funcionario.calendario["date"]; } // Corrigido: Acessar a cor pela chave correta
            else { funcionario.calendario["date"] = nextColor; } // Corrigido: Acessar a cor pela chave correta
            saveState(); // Salva e aciona o 'listenForChanges' que vai chamar renderApp() e recalcular
        }

        function handleAddEmployee() {
            const name = newEmployeeInput.value.trim();
            if (name) {
                const newId = `func-${Date.now()}`;
                state.funcionarios.push({ id: newId, nome: name, calendario: {} });
                state.funcionarioSelecionadoId = newId;
                newEmployeeInput.value = '';
                saveState();
            } else { alert('Por favor, insira um nome para o funcionário.'); }
        }

        function handleRemoveEmployee() {
            if (!state.funcionarioSelecionadoId || state.funcionarios.length === 0) return;
            const selectedEmployee = state.funcionarios.find(f => f.id === state.funcionarioSelecionadoId);
            if(confirm(`Tem certeza que deseja remover "${selectedEmployee.nome}"? Esta ação não pode ser desfeita.`)) {
                state.funcionarios = state.funcionarios.filter(f => f.id !== state.funcionarioSelecionadoId);
                state.funcionarioSelecionadoId = state.funcionarios.length > 0 ? state.funcionarios["0"].id : null; // Corrigido: Acessar o ID corretamente
                saveState();
            }
        }

        function handleSelectEmployee() {
            state.funcionarioSelecionadoId = employeeSelect.value;
            renderCalendar();
            calculateAndDisplaySummaries(); // Recalcula ao trocar de funcionário
        }

        listenForChanges();
        calendarContainer.addEventListener('click', handleDayClick);
        addEmployeeBtn.addEventListener('click', handleAddEmployee);
        removeEmployeeBtn.addEventListener('click', handleRemoveEmployee);
        employeeSelect.addEventListener('change', handleSelectEmployee);
    });
</script>
